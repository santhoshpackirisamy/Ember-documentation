1) .hbs -> Handlebars

2) There are two main types of templates: Route templates and Component templates.

3) Template restrictions:        
        js and css should be added separately.

4) component 

    <div>
      {{outlet}}
    </div>

    <!-- One way to use a component within a template -->
    <MyComponent />

    /////////////////

    <!-- A property that is defined in a component's
    JavaScript file -->
    {{this.numberOfSquirrels}}

    <!-- Some data passed down from a parent component
    or controller -->
    {{@weatherStatus}}

    <!-- This button uses Ember Actions to make it interactive.
    A method named `plantATree` is called when the button is
    clicked. `plantATree` comes from the JavaScript file
    associated with the template, like a Component or
    Controller -->
    <button onclick={{action 'plantATree'}}>
      More trees!
    <button>

    <!-- Here's an example of template logic in action.
    If the `this.skyIsBlue` property is `true`, the text
    inside will be shown -->
    {{#if this.skyIsBlue}}
      If the skyIsBlue property is true, show this message
    {{/if}}

    <!-- You can pass a whole block of markup and handlebars
    content from one component to another. yield is where
    the block shows up when the page is rendered -->
    {{yield}}

5) Helper - can be passed as [] and {}

    import { helper as buildHelper } from '@ember/component/helper';

    export function sum(params) {
      return params[0] + params[1]
    };

    export const helper = buildHelper(sum);

    /////////////////////////////

    <p>Total: {{sum 1 2}}</p>

    {{sum (multiply 2 4) 2}}    
    
6) CSS CRN link

    adding external crn link 
    
    eg: <link integrity="" rel="stylesheet" href="https://my-font-cdn/something.css">
    
    
7) this -> to refer data defined in this js file
   @ -> to refer data passed from parent file
   

8) GET HELPER

    {{get this.address this.part}}
    
    The {{get}} helper makes it easy to dynamically send the value of a variable to another helper or component. This can be useful if you want to output one of several values based on the result of a computed property.
    if the part computed property returns "zip", this will display the result of this.address.zip. If it returns "city", you get this.address.city.
    

9) LET HELPER

    {{#let (concat this.person.firstName this.person.lastName)
      as |fullName|
    }}

    The {{let}} helper lets you create new bindings in your template.
    
10) Array helper
    
    <MyComponent @people={{array
    'Tom Dade'
    'Yehuda Katz'
    this.myOtherPerson}}
    />

    //////////////////////////////
    
    
    app/templates/components/my-component.hbs

    <ul>
      {{#each this.people as |person|}}
        <li>{{person}}</li>
      {{/each}}
    </ul>
    
11) CONDITIONAL

    *) INLINE FORM 
    
        <div class="is-car {{if this.isFast "zoooom" "putt-putt-putt"}}">
        </div>
        
    *) NESTED FORM
    
        <div class="is-car {{if this.isFast "zoooom" "putt-putt-putt"}}">
        </div>
        
    *) BLOCK FORM
    
        {{#if this.person}}
          Welcome back, <b>{{this.person.firstName}} {{this.person.lastName}}</b>!
        {{/if}}
    
12) LOOP
    
    *) INDEX 
    
        <ul>
          {{#each this.people as |person index|}}
            <li>Hello, {{person.name}}! You're number {{index}} in line</li>
          {{/each}}
        </ul>
    
    *) EMPTY
    
        {{#each this.people as |person|}}
          Hello, {{person.name}}!
        {{else}}
          Sorry, nobody is here.
        {{/each}}
        
13) Passing HTML attributes to components

    *) attributeBindings
    
    app/templates/application.hbs

    <NameEditor data-test-my-custom-attribute />
    
    ///////////////////////////////
    
    app/components/name-editor.js

    import Component from '@ember/component';

    export default Component.extend({
      attributeBindings: ['data-test-my-custom-attribute']
    });
    
    *) ...attributes
    
    app/components/name-editor.js

    import Component from '@ember/component';

    export default Component.extend({
      enteredName: null
    });
    
    //////////////////////////////

    app/components/templates/name-editor.hbs

    <p>Hello User, please enter your name:</p>

    <label for="name-editor">
    <Input @value={{this.enteredName}} id="name-editor" />
    
14) Binding attribures in template

    <div id="logo">
      <img src={{this.logoUrl}} alt="Logo">
    </div>

    This generates the following HTML:

    <div id="logo">
      <img src="http://www.example.com/images/logo.png" alt="Logo">
    </div>
    
15) LINK-TO

    The <LinkTo> component takes one or two arguments:

    *) The name of a route. In this example, it would be index, photos, or photos.edit.
    
    *) At most one model for each dynamic segment. By default, Ember.js will replace each segment with the value of the corresponding object's id property. In the example above, the second argument is each photo object, and the id property is used to fill in the dynamic segment with either 1, 2, or 3
    
16) Example for Multiple Segments

    app/router.js

    Router.map(function() {
      this.route('photos', function(){
        this.route('photo', { path: '/:photo_id' }, function(){
          this.route('comments');
          this.route('comment', { path: '/comments/:comment_id' });
        });
      });
    });
    
    ///////////////////////////////// (problem)
    
<div class="photo">
{{this.body}}
</div>

<p><LinkTo @route="photos.photo.comment" @model={{this.primaryComment}}>Main Comment</LinkTo></p>

If you specify only one model, it will represent the innermost dynamic segment :comment_id. The :photo_id segment will use the current photo.

Alternatively, you could pass both a photo's ID and a comment to the component:


    ////////////////////////////////////// (remedy)
    
    app/templates/photo/index.hbs

    <p>
      <LinkTo @route="photo.comment" @models={{array 5 this.primaryComment}}>
        Main Comment for the Next Photo
      </LinkTo>
    </p>
    
17) ACTION 

    eg : <button {{action "select" this.value on="mouseUp"}}>âœ“</button>
    
